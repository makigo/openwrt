#!/bin/sh
[ -f /etc/banner ] && cat /etc/banner
[ -e /tmp/.failsafe ] && cat /etc/banner.failsafe
fgrep -sq '/ overlay ro,' /proc/mounts && {
	echo 'Your JFFS2-partition seems full and overlayfs is mounted read-only.'
	echo 'Please try to remove files from /overlay/upper/... and reboot!'
}

export PATH="/usr/sbin:/usr/bin:/sbin:/bin"
export HOME=$(grep -e "^${USER:-root}:" /etc/passwd | cut -d ":" -f 6)
export HOME=${HOME:-/root}
export PS1='\u@\h:\w\$ '

[ "$TERM" = "xterm" ] && export PS1='\[\e]0;\u@\h: \w\a\]'$PS1

[ -x /bin/more ] || alias more=less
[ -x /usr/bin/vim ] && alias vi=vim || alias vim=vi

alias ll='ls -alF --color=auto'

[ -z "$KSH_VERSION" -o \! -s /etc/mkshrc ] || . /etc/mkshrc

[ -x /usr/bin/arp -o -x /sbin/arp ] || arp() { cat /proc/net/arp; }
[ -x /usr/bin/ldd ] || ldd() { LD_TRACE_LOADED_OBJECTS=1 $*; }

[ -n "$FAILSAFE" ] || {
	for FILE in /etc/profile.d/*.sh; do
		[ -e "$FILE" ] && . "$FILE"
	done
	unset FILE
}

if ( grep -qs '^root::' /etc/shadow && \
     [ -z "$FAILSAFE" ] )
then
cat << EOF
=== WARNING! =====================================
There is no root password defined on this device!
Use the "passwd" command to set up a new password
in order to prevent unauthorized SSH logins.
--------------------------------------------------
EOF
fi

service() {
	[ -f "/etc/init.d/$1" ] || {
		echo "service "'"'"$1"'"'" not found, the following services are available:"
		ls "/etc/init.d"
		return 1
	}
	/etc/init.d/$@
}


###################################################################################
#
# Custom user commands
# Author iMakhonin aka Makigo (Igor Makhonin)
# Email: <work.makhonin@gmail.com>
#

# Change bash prompt. See the article
export PS1='\[\e[0;37m\][\[\e[1;35m\]\@ \[\e[1;31m\]\u\[\e[0;37m\]@\[\e[1;36m\]\h:\[\e[1;33m\]\w\[\e[1;32m\]\[\e[0;37m\]\]\$ \[\e[0m\]'

# Clear the terminal
alias c='clear'

# RAM free in kb
alias f='free'

# Disk free in human terms
alias d='df -h'

# Monitor logs
alias lg='logread -l 30'

# Uptime system
alias t='uptime'

# Reload /etc/profile
alias p='source /etc/profile'

# Level up
alias u='cd ..'

# Alter the ls command
alias l='ls -lAh'
alias ls='ls -lac'

# Command in functions
up() {
	# Uptime
	nowTime=`date +"%s"`
	let upSeconds="$(/usr/bin/cut -d. -f1 /proc/uptime)"
	let secs=$((${upSeconds}%60))
	let mins=$((${upSeconds}/60%60))
	let hours=$((${upSeconds}/3600%24))
	let days=$((${upSeconds}/86400))
	UPTIME=`printf "%d days, %02d:%02d:%02d" "$days" "$hours" "$mins" "$secs"`
	#UPTIME=`printf "%d days %02d:%02d" "$days" "$hours" "$mins"`
	let ssystem=$((${nowTime}-${upSeconds}))
	START=`date -d @$ssystem`

	printf "Uptime System: %1s\n" "$UPTIME"
	printf "-----------------------------------\n"
	printf "Start: %1s\n" "$START"
}

pi() { 
	a="yandex.ru"
	b="google.com"
	c="makhonin.ru"
	z="8.8.8.8"

	help="Usage: pi <number> for ping host\n1 - yandex.ru\n2 - google.com\n3 - makhonin.ru\n8 - 8.8.8.8\n"

	if [ "$1" == "1" ]; then
		ping -c 3 $a
	elif [ "$1" == "2" ]; then
		ping -c 3 $b
	elif [ "$1" == "3" ]; then
		ping -c 3 $c
	elif [ "$1" == "8" ]; then
		ping -c 3 $z
	else
		printf "$help"
	fi
}

q() { echo "Bye..."; sleep 1; exit; }
re() { echo -ne "*** WARNING! The system will be rebooted...\n\n"; reboot now; sleep 3; exit; }

sl() { 
	if [ -n "$1" ]; then
		logread -l 25 -e $1
	else
		printf "Please enter log filter.\nExample: sl named\n"
	fi
}


root() { cd /; l; }
home() { cd /root; l; }
conf() { cd /etc/config; l; }
etc() { cd /etc; l; }
init() { cd /etc/init.d; l; }
var() { cd /var; l; }
usr() { cd /usr; l; }
tmp() { cd /tmp; l; }

ebind() { /etc/init.d/named enable; echo "service named enabled"; }
dbind() { /etc/init.d/named disable; echo "service named disabled"; }
ubind() { /etc/init.d/named start; printf "service named start\n please wait...\r"; sleep 3; logread -l 16 -e named ; }
rbind() { /etc/init.d/named restart; printf "service named restart\n please wait...\r"; sleep 3; logread -l 16 -e named ; }
sbind() { /etc/init.d/named stop; printf "service named stop\n please wait...\r"; sleep 3; logread -l 16 -e named ; }
bind() { cd /etc/bind; ls -lanF; }
master() { cd /etc/bind/master; ls -lahF; }
slave() { cd /etc/bind/slave; ls -lahF; }

lan() { [ "$1" = "-w" ] && nano /etc/config/network || cat /etc/config/network | less; }
wlan() { [ "$1" = "-w" ] && nano /etc/config/wireless || cat /etc/config/wireless | less; }

zone() { 
	a="db.source.lab"
	b="db.makhonin.ru"
	c="4.168.192.in-addr.arpa"

	help="Usage: zone -r <number> for read zone\n       zone -w <number> for write to zone\n\nOr use: hint\n"

	if [ "$1" == "-r" ]; then
		if [ "$2" == "1" ]; then
			cat /etc/bind/master/$a | less
		elif [ "$2" == "2" ]; then
			cat /etc/bind/master/$b | less
		elif [ "$2" == "0" ]; then
			cat /etc/bind/master/$c | less
		else
			printf "$help"
		fi
	elif [ "$1" == "-w" ]; then
		if [ "$2" == "1" ]; then
			nano /etc/bind/master/$a
		elif [ "$2" == "2" ]; then
			nano /etc/bind/master/$b
		elif [ "$2" == "0" ]; then
			nano /etc/bind/master/$c
		else
			printf "$help"
		fi
	else
		printf "$help"
	fi
}

# APT utilit for update and upgrade packages
apt() {
	ver="openwrt ver. 0.1b"
	if [ "$1" == install ]; then 
		echo -ne "Install pakage $2\n"
		opkg install
		echo -ne "\nOperation complete.\n"
		return 0
	elif [ "$1" == "-c" ]; then
		echo -ne "Configure package $2. Please wait...\n"
		opkg configure $2
		echo -ne "\n$LIST\n\nOperation complete.\n"
		return 0
	elif [ "$1" == "-l" ]; then
		echo -ne "List upgradable packages. Please wait...\r"
		SCAN=`opkg list-installed`
		LIST=`opkg list-upgradable | awk -F" - " 'BEGIN {printf "%22s\t %28s\t %28s\n\n", "PACKAGE NAME", "CURRENT VERSION", "NEW VERSION";} {printf "%22s\t %28s\t %28s\n", $1,$2,$3} END {printf "\n";}'`
		if [ -z "$SCAN" ]; then
			echo -ne "All packages is upgrade.\n"
			return 0
		else
			echo -ne "$VER\n\n"
			return 1
		fi
		return 0
	elif [[ "$1" == "-r" && -n "$2" ]]; then
		echo -ne "Remove pakage(s) $2\n"
		opkg remove $2
		echo -ne "\nOperation complete.\n"
		return 0
	elif [ "$1" == "-u" ]; then 
		echo -ne "Update list of available packages. Please wait...\n"
		opkg update
		echo -ne "\nOperation complete.\n"
		return 0
	elif [[ "$1" == "-g" && -n "$2" ]]; then
		echo -ne "Upgrade pakage(s) $2\n";
		opkg upgrade $2
		echo -ne "\nOperation complete.\n"
		return 0
	elif [[ "$1" == "-v" && -n "$2" ]]; then
		SCAN=`opkg list-installed | grep "$2"`
		VER=`opkg list-installed | grep "$2" | awk -F" - " 'BEGIN {printf "%22s\t %28s\n\n", "PACKAGE NAME", "CURRENT VERSION";} {printf "%22s\t %28s\n", $1,$2} END {printf "\n";}'`
		if [ -z "$SCAN" ]; then
			echo -ne "Package <$2> is not installed.\n"
			return 0
		else
			echo -ne "$VER\n\n"
			return 1
		fi
	else 
		printf "apt $ver\n"
		printf "Usage: apt command [options]\n"
		printf "\n"
		printf "Commands:\n"
		printf "  -l          - List packages based on package names\n"
		printf "  -u          - Update list of available packages\n"
		printf "  -i <pkgs>   - Install package(s)\n"
		printf "  -c <pkgs>   - Configure unpacked package(s)\n"
		printf "  -g <pkgs>   - Upgrade packages\n"
		printf "  -r <pkgs>   - Remove package(s)\n"
		printf "  -v <pkgs>   - Show the installed version of a package\n\n"
	fi
}

### ─ ┬ ├ ≥ ┤ ▒ ° ± ┘ ┐ ┌ ≤ │ ┴ ┼ └ ###

hint() {
[ "$1" == "w" ] && nano /etc/profile;
cat << EOF
┌──────────────────────────────────────────┐
│           QUICK USER COMMANDS            │
│        c - Clear the terminal            │
│        d - Disk free in human terms      │
│        f - RAM free in kb                │
│        l - List directory                │
│        p - Reload Profile file           │
│        t — original uptime system        │
│        u - To the directory above        │
│        q — Exit from the shell           │
│       lg - Show all log                  │
│       pi - ping hosts by numbers         │
│       sl - Show log with filter          │
│       up — Custom uptime system          │
│      lan - Read/ -w Write network conf   │
│     wlan - Read/ -w Write wireless conf  │
├──────────────────────────────────────────┤
│              NAVIGATION                  │
│     root - Go to directory /             │
│     home - Go to directory /home         │
│     conf - Go to directory ../config     │
│      etc - Go to directory /etc          │
│     init - Go to directory ../init.d     │
│      usr - Go to directory /usr          │
│      tmp - Go to directory /tmp          │
├──────────────────────────────────────────┤
│      apt - Short version opkg            │
├──────────────────────────────────────────┤
│             BIND COMMANDS                │
│    ebind - Service named enable          │
│    dbind - Service named disable         │
│    ubind - Service named start           │
│    rbind - Service named restart         │
│    sbind - Service named stop            │
│     bind - Go to directory ../bind       │
│   master - Go to directory ../master     │
│    slave - Go to directory ../slave      │
├──────────────────────────────────────────┤
│     zone -r 1  - Read source.lab         │
│     zone -r 2  - Read makhonin.ru        │
│     zone -r 0  - Read 4.168.192          │
│     zone -w 1  - Write source.lab        │
│     zone -w 2  - Write makhonin.ru       │
│     zone -w 0  - Write 4.168.192         │
├──────────────────────────────────────────┤
│       re - Reboot System                 │
└──────────────────────────────────────────┘
EOF
}

#
###################################################################################
